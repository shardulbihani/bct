import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load the dataset
df = pd.read_csv('sales_data_sample.csv', encoding='ISO-8859-1')

# Select only numerical columns and fill missing values
df_numeric = df.select_dtypes(include=[np.number])
df_numeric.fillna(df_numeric.mean(), inplace=True)

# Standardize the data
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df_numeric)

# Calculate inertia for k values from 1 to 10
inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(df_scaled)
    inertia.append(kmeans.inertia_)

# Plot the Elbow Method graph
plt.plot(range(1, 11), inertia, 'bx-')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method to Determine Optimal k')
plt.show()

# Method: Elbow Method with Percentage Change
percentage_changes = [(inertia[i-1] - inertia[i]) / inertia[i-1] * 100 for i in range(1, len(inertia))]
optimal_k = 1 + np.argmax(percentage_changes)  # Index + 1 to match cluster number
print(f"The optimal number of clusters based on the Elbow Method is: {optimal_k}")

# Apply K-Means with the chosen number of clusters
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
df['Cluster'] = kmeans.fit_predict(df_scaled)

# Display a few rows of the clustered data
print(df.head())
